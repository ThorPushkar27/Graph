// Leetcode Hard problem

TC =  O(N * |S| + K) , where |S| denotes maximum length.
SC = O(K)

class Solution{
    public:
    string findOrder(string dict[], int N, int K) {
        vector<int>adj[K];
        for(int i =0; i<N-1; i++){
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.size(),s2.size());
            for(int ptr =0; ptr<len; ptr++){
                if(s1[ptr]!=s2[ptr]){
                    adj[s1[ptr]-'a'].push_back(s2[ptr]-'a'); // This is done to convert alphabet to numeric.
                    break;
                    
                }
            }
        }
        //Now we have to do simple topological sort over that graph.
        
        vector<int>indegree(K,0);
        for(int i =0; i<K; i++){
            for(auto it: adj[i]){
                indegree[it]++;
            }
        }
        queue<int>q;
        vector<int>ans;
        for(int i =0; i<K; i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        while(q.empty()==false){
            int node = q.front();
            q.pop();
            ans.push_back(node);
            for(auto it: adj[node]){
                indegree[it]--;
                if(indegree[it]==0){
                    q.push(it);
                }
            }
        }
        string ans1 ="";
        for(auto it: ans){
            ans1=ans1+(char(it+'a'));
        }
        return ans1;
        //code here
    }
};
