class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int,int>>adj[n];
        for(auto it: flights){
            int from = it[0];
            int to = it[1];
            int cost = it[2];
            adj[from].push_back({to,cost});

        }
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        vector<int>distance(n,1e9);
        distance[src]=0;
        while(q.empty()==false){
            auto it = q.front();
            q.pop();
            int stops = it.first;
            int node = it.second.first;
            int costs = it.second.second;
            if(stops>k ) continue;
            for(auto it: adj[node]){
                int adjNode = it.first;
                int edgewt = it.second;

                if(costs+edgewt< distance[adjNode] && stops<=k){
                    distance[adjNode]= costs +edgewt;
                    q.push({stops+1,{adjNode,costs+edgewt}});
                }
            }
        }



        if(distance[dst]== 1e9) return -1;
        return distance[dst];
        
    }
};
