TC = O(V+E)
SC = O(n)

class Solution {
  public:
  bool bfs(int node, vector<int>adj[], vector<int>&visited){
      visited[node]=1;
      queue<pair<int,int>>q;
      q.push({node,-1});
      while(q.empty()==false){
          pair<int,int>p  = q.front();
          int child = p.first;
          int parent = p.second;
          q.pop();
          for(auto it: adj[child]){
              if(visited[it]==0){
                  q.push({it,child});
                  visited[it]=1;
              }
              else if( parent!= it){
                  return true;
              }
          }
      }
      return false;
  }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        vector<int>visited(V,0);
        for(int i =0; i<V; i++){
            if(visited[i]==0){
                if (bfs(i,adj,visited)) return true;
            }
        }
        return false;
        
        // Code here
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
