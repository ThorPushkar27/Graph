TC = O(v2)
SC= O(V)

using BFS traversal....dimag kharab ho gya karne me

class Solution {
  public:
  void bfs(vector<int>adj[], vector<int>&visited, int i){
      
      //int visited[V]={0};
      queue<int>q;
      q.push(i);
      visited[i]=1;
      while(q.empty()==false){
          int node = q.front();
          q.pop();
          for(auto it : adj[node]){
              if(visited[it]==0){
                  q.push(it);
                  visited[it]=1;
              }
          }
      }
  }
    int numProvinces(vector<vector<int>> adj, int V) {
        vector<int>adjL[V];
        for(int i =0; i<V; i++){
            for(int j =0; j<V; j++){
                if(adj[i][j]==1){
                    adjL[i].push_back(j);
                }
            }
        }
        int count =0;
        vector<int>visited(V+1,0);
        //vector<int>bfs1;
        for(int i=0; i<V; i++){
            if(visited[i]==0){
                count++;
                bfs(adjL,visited,i);
            }
        }
        return count;
        // code here
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int V,x;
        cin>>V;
        
        vector<vector<int>> adj;
        
        for(int i=0; i<V; i++)
        {
            vector<int> temp;
            for(int j=0; j<V; j++)
            {
                cin>>x;
                temp.push_back(x);
            }
            adj.push_back(temp);
        }
        

        Solution ob;
        cout << ob.numProvinces(adj,V) << endl;
    }
    return 0;
}
// } Driver Code Ends
