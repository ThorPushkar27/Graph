TC = O(N+E)
SC = O(N) //Same as toopological sort.

class Solution {
  public:
    
    void topoSort(int node, stack<int>&st,vector<int>&visited,vector<pair<int,int>>adj[]){
        //vector<int>visited(N,0);
        
        visited[node]=1;
        for(auto it: adj[node]){
            int v = it.first;
            if(visited[v]==0){
                topoSort(v,st,visited,adj);
            }
        }
        st.push(node);
    }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int,int>>adj[N];
        for(int i =0; i<M; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj[u].push_back({v,wt});
         }
         //find the topo sort.
         vector<int>visited(N,0);
         stack<int>st;
         for(int i =0; i<N; i++){
             if(visited[i]==0){
                 topoSort(i,st,visited,adj);
             }
         }
         // do the distance calculations
         vector<int>distance(N,1e9);
         distance[0]=0;
         while(st.empty()==false){
             int node = st.top();
             st.pop();
             for(auto it: adj[node]){
                 int v = it.first;
                 int wt = it.second;
                 if(distance[node]+wt< distance[v]){
                     distance[v]= distance[node]+wt;
                 }
                 
             }
         }
         for(int i=0; i<N; i++){
             if(distance[i]==1e9) {
                 distance[i]= -1;
             }
         }
         return distance;
         
        // code here
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for(int i=0; i<m; ++i){
            vector<int> temp;
            for(int j=0; j<3; ++j){
                int x; cin>>x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }
        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}
