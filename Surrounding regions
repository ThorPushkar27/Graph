TC= O(n*m)
SC = O(n*m)

class Solution {
public:
    void dfs(int row,int col, vector<vector<int>>&visited,vector<vector<char>>& board, int ax[], int ay[] ){
        visited[row][col]=1;
        int n = board.size();
        int m = board[0].size();
        
        for(int i=0; i<4; i++){
            int x= row+ax[i];
            int y= col+ay[i];

            if(x>=0 && x<n && y>=0 && y<m &&  board[x][y]=='O'&& visited[x][y]==0){
                dfs(x,y,visited,board,ax,ay);

            }
        }


    }
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>>visited(n,vector<int>(m,0));
        int ax[4] = {-1,0,1,0};
        int ay[4] = {0,1,0,-1};

        
        for(int i =0; i<n; i++){
            if(visited[i][0]==0 && board[i][0]=='O'){
                
                dfs(i,0,visited,board,ax,ay);
            }
            if(visited[i][m-1]==0 && board[i][m-1]=='O'){
                //visited[i][m-1]==1;
                dfs(i,m-1,visited,board,ax,ay);
            }

        }
        for(int j=0; j<m; j++){
            if(visited[0][j]==0 && board[0][j]=='O'){
                //visited[0][j]==1;
                dfs(0,j,visited,board,ax,ay);
            }
            if(visited[n-1][j]==0 && board[n-1][j]=='O'){
                //visited[n-1][j]==1;
                dfs(n-1, j, visited, board,ax,ay);
            }
        }
        for(int i=0; i<n;i++){
            for(int j =0; j<m; j++){
                if(visited[i][j]==0 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        //return board;
        
    }
};
