TC =  O(V+E)
SC = O(2V)

class Solution
{
    private:
    void dfs(int node,vector<int>adj[],stack<int>&st, vector<int>&visited){
        visited[node]=1;
        //st.push(node);
        for(auto it: adj[node]){
            if(visited[it]==0){
                //st.push(it);
                dfs(it,adj,st,visited);
                //st.push(it);
            }
        }
        st.push(node);
    }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int>visited(V,0);
	    stack<int>st;
	    vector<int>ans;
	    for(int i =0; i<V; i++){
	        if(visited[i]==0)
	            dfs(i,adj,st,visited);
	    }
	    while(st.empty()==false){
	        int a = st.top();
	        st.pop();
	        ans.push_back(a);
	    }
	    return ans;
	    // code here
	}
};
